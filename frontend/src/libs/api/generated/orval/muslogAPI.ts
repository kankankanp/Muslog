/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Muslog API
 * OpenAPI spec version: 1.0.0
 */
import type {
  DeleteBlogsId200,
  DeletePostsPostIDUnlike200,
  DeleteTagsId200,
  DeleteTagsPostsPostIDBody,
  GetBlogs200,
  GetBlogsId200,
  GetBlogsPagePage200,
  GetPostsPostIDLiked200,
  GetSpotifySearch200,
  GetSpotifySearchParams,
  GetTags200,
  GetTagsId200,
  GetTagsPostsPostID200,
  GetUsers200,
  GetUsersId200,
  GetUsersIdPosts200,
  LoginRequest,
  PostAuthLogin200,
  PostBlogs201,
  PostBlogsBody,
  PostLogout200,
  PostPostsPostIDLike200,
  PostRefresh200,
  PostRegister201,
  PostTags201,
  PostTagsBody,
  PostTagsPostsPostIDBody,
  PutBlogsId200,
  PutBlogsIdBody,
  PutTagsId200,
  PutTagsIdBody,
  RegisterRequest,
  User,
} from "./model";

import { customInstance } from "../../custom-instance";
export const getMuslogAPI = () => {
  /**
   * Get all post posts
   * @summary Get all blogs
   */
  const getBlogs = () => {
    return customInstance<GetBlogs200>({ url: `/blogs`, method: "GET" });
  };

  /**
   * Create a new post post
   * @summary Create a new post
   */
  const postBlogs = (postBlogsBody: PostBlogsBody) => {
    return customInstance<PostBlogs201>({
      url: `/blogs`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postBlogsBody,
    });
  };

  /**
   * Get a single post by its ID
   * @summary Get a post by ID
   */
  const getBlogsId = (id: number) => {
    return customInstance<GetBlogsId200>({
      url: `/blogs/${id}`,
      method: "GET",
    });
  };

  /**
   * Update an existing post
   * @summary Update a post
   */
  const putBlogsId = (id: number, putBlogsIdBody: PutBlogsIdBody) => {
    return customInstance<PutBlogsId200>({
      url: `/blogs/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: putBlogsIdBody,
    });
  };

  /**
   * Delete a post by its ID
   * @summary Delete a post
   */
  const deleteBlogsId = (id: number) => {
    return customInstance<DeleteBlogsId200>({
      url: `/blogs/${id}`,
      method: "DELETE",
    });
  };

  /**
   * Get posts paginated
   * @summary Get blogs by page
   */
  const getBlogsPagePage = (page: number) => {
    return customInstance<GetBlogsPagePage200>({
      url: `/blogs/page/${page}`,
      method: "GET",
    });
  };

  /**
   * Like a post by its ID
   * @summary Like a post
   */
  const postPostsPostIDLike = (postID: number) => {
    return customInstance<PostPostsPostIDLike200>({
      url: `/posts/${postID}/like`,
      method: "POST",
    });
  };

  /**
   * Unlike a post by its ID
   * @summary Unlike a post
   */
  const deletePostsPostIDUnlike = (postID: number) => {
    return customInstance<DeletePostsPostIDUnlike200>({
      url: `/posts/${postID}/unlike`,
      method: "DELETE",
    });
  };

  /**
   * Check if the current user has liked a specific post
   * @summary Check if post is liked by user
   */
  const getPostsPostIDLiked = (postID: number) => {
    return customInstance<GetPostsPostIDLiked200>({
      url: `/posts/${postID}/liked`,
      method: "GET",
    });
  };

  /**
   * Search for tracks on Spotify by a query string.
   * @summary Search Spotify tracks
   */
  const getSpotifySearch = (params: GetSpotifySearchParams) => {
    return customInstance<GetSpotifySearch200>({
      url: `/spotify/search`,
      method: "GET",
      params,
    });
  };

  /**
   * Register a new user.
   * @summary User registration
   */
  const postRegister = (registerRequest: RegisterRequest) => {
    return customInstance<PostRegister201>({
      url: `/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: registerRequest,
    });
  };

  /**
   * Log in a user and return a JWT token.
   * @summary User login
   */
  const postAuthLogin = (loginRequest: LoginRequest) => {
    return customInstance<PostAuthLogin200>({
      url: `/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginRequest,
    });
  };

  /**
   * Refresh the JWT access token using the refresh token.
   * @summary Refresh JWT token
   */
  const postRefresh = () => {
    return customInstance<PostRefresh200>({ url: `/refresh`, method: "POST" });
  };

  /**
   * Log out a user by clearing JWT cookies.
   * @summary User logout
   */
  const postLogout = () => {
    return customInstance<PostLogout200>({ url: `/logout`, method: "POST" });
  };

  /**
   * Get the currently logged in user's information.
   * @summary Get current user
   */
  const getMe = () => {
    return customInstance<User>({ url: `/me`, method: "GET" });
  };

  /**
   * Get all users
   * @summary Get all users
   */
  const getUsers = () => {
    return customInstance<GetUsers200>({ url: `/users`, method: "GET" });
  };

  /**
   * Get a single user by their ID
   * @summary Get a user by ID
   */
  const getUsersId = (id: string) => {
    return customInstance<GetUsersId200>({
      url: `/users/${id}`,
      method: "GET",
    });
  };

  /**
   * Get all posts by a user
   * @summary Get user posts
   */
  const getUsersIdPosts = (id: string) => {
    return customInstance<GetUsersIdPosts200>({
      url: `/users/${id}/posts`,
      method: "GET",
    });
  };

  /**
   * Create a new tag
   * @summary Create a new tag
   */
  const postTags = (postTagsBody: PostTagsBody) => {
    return customInstance<PostTags201>({
      url: `/tags`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postTagsBody,
    });
  };

  /**
   * Get all tags
   * @summary Get all tags
   */
  const getTags = () => {
    return customInstance<GetTags200>({ url: `/tags`, method: "GET" });
  };

  /**
   * Get a single tag by its ID
   * @summary Get a tag by ID
   */
  const getTagsId = (id: number) => {
    return customInstance<GetTagsId200>({ url: `/tags/${id}`, method: "GET" });
  };

  /**
   * Update an existing tag
   * @summary Update a tag
   */
  const putTagsId = (id: number, putTagsIdBody: PutTagsIdBody) => {
    return customInstance<PutTagsId200>({
      url: `/tags/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: putTagsIdBody,
    });
  };

  /**
   * Delete a tag by its ID
   * @summary Delete a tag
   */
  const deleteTagsId = (id: number) => {
    return customInstance<DeleteTagsId200>({
      url: `/tags/${id}`,
      method: "DELETE",
    });
  };

  /**
   * Add tags to a specific post
   * @summary Add tags to a post
   */
  const postTagsPostsPostID = (
    postID: number,
    postTagsPostsPostIDBody: PostTagsPostsPostIDBody,
  ) => {
    return customInstance<void>({
      url: `/tags/posts/${postID}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postTagsPostsPostIDBody,
    });
  };

  /**
   * Remove tags from a specific post
   * @summary Remove tags from a post
   */
  const deleteTagsPostsPostID = (
    postID: number,
    deleteTagsPostsPostIDBody: DeleteTagsPostsPostIDBody,
  ) => {
    return customInstance<void>({
      url: `/tags/posts/${postID}`,
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      data: deleteTagsPostsPostIDBody,
    });
  };

  /**
   * Get all tags associated with a specific post
   * @summary Get tags by post ID
   */
  const getTagsPostsPostID = (postID: number) => {
    return customInstance<GetTagsPostsPostID200>({
      url: `/tags/posts/${postID}`,
      method: "GET",
    });
  };

  return {
    getBlogs,
    postBlogs,
    getBlogsId,
    putBlogsId,
    deleteBlogsId,
    getBlogsPagePage,
    postPostsPostIDLike,
    deletePostsPostIDUnlike,
    getPostsPostIDLiked,
    getSpotifySearch,
    postRegister,
    postAuthLogin,
    postRefresh,
    postLogout,
    getMe,
    getUsers,
    getUsersId,
    getUsersIdPosts,
    postTags,
    getTags,
    getTagsId,
    putTagsId,
    deleteTagsId,
    postTagsPostsPostID,
    deleteTagsPostsPostID,
    getTagsPostsPostID,
  };
};
export type GetBlogsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getBlogs"]>>
>;
export type PostBlogsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["postBlogs"]>>
>;
export type GetBlogsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getBlogsId"]>>
>;
export type PutBlogsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["putBlogsId"]>>
>;
export type DeleteBlogsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["deleteBlogsId"]>>
>;
export type GetBlogsPagePageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getBlogsPagePage"]>>
>;
export type PostPostsPostIDLikeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["postPostsPostIDLike"]>>
>;
export type DeletePostsPostIDUnlikeResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getMuslogAPI>["deletePostsPostIDUnlike"]>
  >
>;
export type GetPostsPostIDLikedResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getPostsPostIDLiked"]>>
>;
export type GetSpotifySearchResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getSpotifySearch"]>>
>;
export type PostRegisterResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["postRegister"]>>
>;
export type PostAuthLoginResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["postAuthLogin"]>>
>;
export type PostRefreshResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["postRefresh"]>>
>;
export type PostLogoutResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["postLogout"]>>
>;
export type GetMeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getMe"]>>
>;
export type GetUsersResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getUsers"]>>
>;
export type GetUsersIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getUsersId"]>>
>;
export type GetUsersIdPostsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getUsersIdPosts"]>>
>;
export type PostTagsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["postTags"]>>
>;
export type GetTagsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getTags"]>>
>;
export type GetTagsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getTagsId"]>>
>;
export type PutTagsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["putTagsId"]>>
>;
export type DeleteTagsIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["deleteTagsId"]>>
>;
export type PostTagsPostsPostIDResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["postTagsPostsPostID"]>>
>;
export type DeleteTagsPostsPostIDResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["deleteTagsPostsPostID"]>>
>;
export type GetTagsPostsPostIDResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getMuslogAPI>["getTagsPostsPostID"]>>
>;
