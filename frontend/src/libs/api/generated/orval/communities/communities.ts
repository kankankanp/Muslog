/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Muslog API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateCommunityRequest,
  GetCommunities200,
  GetCommunitiesCommunityIdMessages200,
  PostCommunities201,
} from ".././model";

import { customInstance } from "../../../custom-instance";

/**
 * Retrieve a list of all chat communities.
 * @summary Get all communities
 */
export const getCommunities = (signal?: AbortSignal) => {
  return customInstance<GetCommunities200>({
    url: `/communities`,
    method: "GET",
    signal,
  });
};

export const getGetCommunitiesQueryKey = () => {
  return [`/communities`] as const;
};

export const getGetCommunitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCommunitiesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunities>>> = ({
    signal,
  }) => getCommunities(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommunities>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommunitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommunities>>
>;
export type GetCommunitiesQueryError = unknown;

export function useGetCommunities<
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunities>>,
          TError,
          Awaited<ReturnType<typeof getCommunities>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommunities<
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunities>>,
          TError,
          Awaited<ReturnType<typeof getCommunities>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommunities<
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all communities
 */

export function useGetCommunities<
  TData = Awaited<ReturnType<typeof getCommunities>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCommunities>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommunitiesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new chat community.
 * @summary Create a new community
 */
export const postCommunities = (
  createCommunityRequest: CreateCommunityRequest,
  signal?: AbortSignal,
) => {
  return customInstance<PostCommunities201>({
    url: `/communities`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createCommunityRequest,
    signal,
  });
};

export const getPostCommunitiesMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommunities>>,
    TError,
    { data: CreateCommunityRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommunities>>,
  TError,
  { data: CreateCommunityRequest },
  TContext
> => {
  const mutationKey = ["postCommunities"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommunities>>,
    { data: CreateCommunityRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCommunities(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommunitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommunities>>
>;
export type PostCommunitiesMutationBody = CreateCommunityRequest;
export type PostCommunitiesMutationError = void;

/**
 * @summary Create a new community
 */
export const usePostCommunities = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postCommunities>>,
      TError,
      { data: CreateCommunityRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postCommunities>>,
  TError,
  { data: CreateCommunityRequest },
  TContext
> => {
  const mutationOptions = getPostCommunitiesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve historical chat messages for a specific community.
 * @summary Get messages for a community
 */
export const getCommunitiesCommunityIdMessages = (
  communityId: string,
  signal?: AbortSignal,
) => {
  return customInstance<GetCommunitiesCommunityIdMessages200>({
    url: `/communities/${communityId}/messages`,
    method: "GET",
    signal,
  });
};

export const getGetCommunitiesCommunityIdMessagesQueryKey = (
  communityId: string,
) => {
  return [`/communities/${communityId}/messages`] as const;
};

export const getGetCommunitiesCommunityIdMessagesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
  TError = void,
>(
  communityId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCommunitiesCommunityIdMessagesQueryKey(communityId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>
  > = ({ signal }) => getCommunitiesCommunityIdMessages(communityId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!communityId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommunitiesCommunityIdMessagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>
>;
export type GetCommunitiesCommunityIdMessagesQueryError = void;

export function useGetCommunitiesCommunityIdMessages<
  TData = Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
  TError = void,
>(
  communityId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommunitiesCommunityIdMessages<
  TData = Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
  TError = void,
>(
  communityId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommunitiesCommunityIdMessages<
  TData = Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
  TError = void,
>(
  communityId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get messages for a community
 */

export function useGetCommunitiesCommunityIdMessages<
  TData = Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
  TError = void,
>(
  communityId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommunitiesCommunityIdMessages>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommunitiesCommunityIdMessagesQueryOptions(
    communityId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
