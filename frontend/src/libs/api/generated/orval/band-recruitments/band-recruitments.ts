/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Muslog API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApplyBandRecruitmentRequest,
  BandRecruitmentDetailResponse,
  BandRecruitmentListResponse,
  CreateBandRecruitmentRequest,
  GetBandRecruitmentsParams,
  PostBandRecruitmentsIdApply200,
  UpdateBandRecruitmentRequest
} from '.././model';

import { customInstance } from '../../../custom-instance';




/**
 * Retrieve a paginated list of band recruitments with optional filters.
 * @summary Get band recruitments
 */
export const getBandRecruitments = (
    params?: GetBandRecruitmentsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<BandRecruitmentListResponse>(
      {url: `/band-recruitments`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetBandRecruitmentsQueryKey = (params?: GetBandRecruitmentsParams,) => {
    return [`/band-recruitments`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBandRecruitmentsQueryOptions = <TData = Awaited<ReturnType<typeof getBandRecruitments>>, TError = unknown>(params?: GetBandRecruitmentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitments>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBandRecruitmentsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBandRecruitments>>> = ({ signal }) => getBandRecruitments(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBandRecruitmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getBandRecruitments>>>
export type GetBandRecruitmentsQueryError = unknown


export function useGetBandRecruitments<TData = Awaited<ReturnType<typeof getBandRecruitments>>, TError = unknown>(
 params: undefined |  GetBandRecruitmentsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBandRecruitments>>,
          TError,
          Awaited<ReturnType<typeof getBandRecruitments>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBandRecruitments<TData = Awaited<ReturnType<typeof getBandRecruitments>>, TError = unknown>(
 params?: GetBandRecruitmentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBandRecruitments>>,
          TError,
          Awaited<ReturnType<typeof getBandRecruitments>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBandRecruitments<TData = Awaited<ReturnType<typeof getBandRecruitments>>, TError = unknown>(
 params?: GetBandRecruitmentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitments>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get band recruitments
 */

export function useGetBandRecruitments<TData = Awaited<ReturnType<typeof getBandRecruitments>>, TError = unknown>(
 params?: GetBandRecruitmentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitments>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBandRecruitmentsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new band recruitment post.
 * @summary Create a band recruitment
 */
export const postBandRecruitments = (
    createBandRecruitmentRequest: CreateBandRecruitmentRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<BandRecruitmentDetailResponse>(
      {url: `/band-recruitments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBandRecruitmentRequest, signal
    },
      );
    }
  


export const getPostBandRecruitmentsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBandRecruitments>>, TError,{data: CreateBandRecruitmentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postBandRecruitments>>, TError,{data: CreateBandRecruitmentRequest}, TContext> => {

const mutationKey = ['postBandRecruitments'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postBandRecruitments>>, {data: CreateBandRecruitmentRequest}> = (props) => {
          const {data} = props ?? {};

          return  postBandRecruitments(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostBandRecruitmentsMutationResult = NonNullable<Awaited<ReturnType<typeof postBandRecruitments>>>
    export type PostBandRecruitmentsMutationBody = CreateBandRecruitmentRequest
    export type PostBandRecruitmentsMutationError = unknown

    /**
 * @summary Create a band recruitment
 */
export const usePostBandRecruitments = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBandRecruitments>>, TError,{data: CreateBandRecruitmentRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postBandRecruitments>>,
        TError,
        {data: CreateBandRecruitmentRequest},
        TContext
      > => {

      const mutationOptions = getPostBandRecruitmentsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieve a band recruitment by ID.
 * @summary Get band recruitment detail
 */
export const getBandRecruitmentsId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<BandRecruitmentDetailResponse>(
      {url: `/band-recruitments/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetBandRecruitmentsIdQueryKey = (id: string,) => {
    return [`/band-recruitments/${id}`] as const;
    }

    
export const getGetBandRecruitmentsIdQueryOptions = <TData = Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError = void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBandRecruitmentsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBandRecruitmentsId>>> = ({ signal }) => getBandRecruitmentsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBandRecruitmentsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getBandRecruitmentsId>>>
export type GetBandRecruitmentsIdQueryError = void


export function useGetBandRecruitmentsId<TData = Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError = void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBandRecruitmentsId>>,
          TError,
          Awaited<ReturnType<typeof getBandRecruitmentsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBandRecruitmentsId<TData = Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBandRecruitmentsId>>,
          TError,
          Awaited<ReturnType<typeof getBandRecruitmentsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBandRecruitmentsId<TData = Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get band recruitment detail
 */

export function useGetBandRecruitmentsId<TData = Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBandRecruitmentsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBandRecruitmentsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an existing band recruitment.
 * @summary Update a band recruitment
 */
export const putBandRecruitmentsId = (
    id: string,
    updateBandRecruitmentRequest: UpdateBandRecruitmentRequest,
 ) => {
      
      
      return customInstance<BandRecruitmentDetailResponse>(
      {url: `/band-recruitments/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateBandRecruitmentRequest
    },
      );
    }
  


export const getPutBandRecruitmentsIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putBandRecruitmentsId>>, TError,{id: string;data: UpdateBandRecruitmentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putBandRecruitmentsId>>, TError,{id: string;data: UpdateBandRecruitmentRequest}, TContext> => {

const mutationKey = ['putBandRecruitmentsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putBandRecruitmentsId>>, {id: string;data: UpdateBandRecruitmentRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putBandRecruitmentsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutBandRecruitmentsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putBandRecruitmentsId>>>
    export type PutBandRecruitmentsIdMutationBody = UpdateBandRecruitmentRequest
    export type PutBandRecruitmentsIdMutationError = void

    /**
 * @summary Update a band recruitment
 */
export const usePutBandRecruitmentsId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putBandRecruitmentsId>>, TError,{id: string;data: UpdateBandRecruitmentRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putBandRecruitmentsId>>,
        TError,
        {id: string;data: UpdateBandRecruitmentRequest},
        TContext
      > => {

      const mutationOptions = getPutBandRecruitmentsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Submit an application to a band recruitment.
 * @summary Apply to a band recruitment
 */
export const postBandRecruitmentsIdApply = (
    id: string,
    applyBandRecruitmentRequest: ApplyBandRecruitmentRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostBandRecruitmentsIdApply200>(
      {url: `/band-recruitments/${id}/apply`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applyBandRecruitmentRequest, signal
    },
      );
    }
  


export const getPostBandRecruitmentsIdApplyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBandRecruitmentsIdApply>>, TError,{id: string;data: ApplyBandRecruitmentRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postBandRecruitmentsIdApply>>, TError,{id: string;data: ApplyBandRecruitmentRequest}, TContext> => {

const mutationKey = ['postBandRecruitmentsIdApply'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postBandRecruitmentsIdApply>>, {id: string;data: ApplyBandRecruitmentRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  postBandRecruitmentsIdApply(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostBandRecruitmentsIdApplyMutationResult = NonNullable<Awaited<ReturnType<typeof postBandRecruitmentsIdApply>>>
    export type PostBandRecruitmentsIdApplyMutationBody = ApplyBandRecruitmentRequest
    export type PostBandRecruitmentsIdApplyMutationError = void

    /**
 * @summary Apply to a band recruitment
 */
export const usePostBandRecruitmentsIdApply = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postBandRecruitmentsIdApply>>, TError,{id: string;data: ApplyBandRecruitmentRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postBandRecruitmentsIdApply>>,
        TError,
        {id: string;data: ApplyBandRecruitmentRequest},
        TContext
      > => {

      const mutationOptions = getPostBandRecruitmentsIdApplyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    