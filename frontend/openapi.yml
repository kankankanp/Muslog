openapi: 3.0.0
info:
  title: Muslog API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1

security:
  - cookieAuth: []

paths:
  /posts:
    get:
      summary: Get all posts
      description: Get all posts
      tags:
        - posts
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
    post:
      summary: Create a new post
      description: Create a new post
      tags:
        - posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                userId:
                  type: string
                tracks:
                  type: array
                  items:
                    $ref: "#/components/schemas/Track"
                tags:
                  type: array
                  items:
                    type: string
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: "#/components/schemas/Post"
  /posts/{id}:
    get:
      summary: Get a post by ID
      description: Get a single post by its ID
      tags:
        - posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Post ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: "#/components/schemas/Post"
        "404":
          description: Not Found
    put:
      summary: Update a post
      description: Update an existing post
      tags:
        - posts
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: "#/components/schemas/Post"
        "404":
          description: Not Found
    delete:
      summary: Delete a post
      description: Delete a post by its ID
      tags:
        - posts
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Post ID
      responses:
        "200":
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /posts/page/{page}:
    get:
      summary: Get posts by page
      description: Get posts paginated
      tags:
        - posts
      parameters:
        - in: path
          name: page
          schema:
            type: integer
          required: true
          description: Page number
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  totalCount:
                    type: integer
  /posts/search:
    get:
      summary: Search posts
      description: Search for posts by query and tags
      tags:
        - posts
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Search query string for post title or description
        - in: query
          name: tags
          schema:
            type: string
          description: Comma-separated list of tags to filter by
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: perPage
          schema:
            type: integer
            default: 10
          description: Number of items per page for pagination
      responses:
        "200":
          description: Successful response with a list of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  perPage:
                    type: integer
        "500":
          description: Internal server error
  /posts/{postID}/like:
    post:
      summary: Like a post
      description: Like a post by its ID
      tags:
        - likes
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            type: integer
          description: Post ID
      responses:
        "200":
          description: Post liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /posts/{postID}/unlike:
    delete:
      summary: Unlike a post
      description: Unlike a post by its ID
      tags:
        - likes
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            type: integer
          description: Post ID
      responses:
        "200":
          description: Post unliked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  
  /spotify/search:
    get:
      summary: Search Spotify tracks
      description: Search for tracks on Spotify by a query string.
      tags:
        - spotify
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: The search query string for tracks.
      responses:
        "200":
          description: Successful response with a list of tracks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tracks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Track"
        "400":
          description: Bad request, missing search term.
        "500":
          description: Internal server error.
  /auth/register:
    post:
      summary: User registration
      description: Register a new user.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input
  /auth/login:
    post:
      summary: User login
      description: Log in a user and return a JWT token.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Unauthorized
  /auth/google:
    get:
      summary: Get Google OAuth URL
      description: Get the URL to redirect to for Google OAuth authentication.
      tags:
        - auth
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  authURL:
                    type: string
  /refresh:
    post:
      summary: Refresh JWT token
      description: Refresh the JWT access token using the refresh token.
      tags:
        - auth
      responses:
        "200":
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  accessToken:
                    type: string
        "401":
          description: Unauthorized
  /logout:
    post:
      summary: User logout
      description: Log out a user by clearing JWT cookies.
      tags:
        - auth
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /me:
    get:
      summary: Get current user
      description: Get the currently logged in user's information.
      tags:
        - auth
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
  /users:
    get:
      summary: Get all users
      description: Get all users
      tags:
        - users
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
  /users/{id}:
    get:
      summary: Get a user by ID
      description: Get a single user by their ID
      tags:
        - users
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "404":
          description: Not Found
  /users/{id}/posts:
    get:
      summary: Get user posts
      description: Get all posts by a user
      tags:
        - users
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
  /users/{userId}/profile-image:
    post:
      summary: Upload or update a user's profile image
      description: Upload or update a user's profile image
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Profile image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  imageUrl:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: User not found
        "500":
          description: Internal server error
  /posts/{postId}/header-image:
    post:
      summary: Upload or update a post's header image
      description: Upload or update a post's header image
      tags:
        - posts
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
          description: Post ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Post header image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  imageUrl:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Post not found
        "500":
          description: Internal server error
  /images/upload:
    post:
      summary: Upload a generic image
      description: Upload a generic image for use within content (e.g., in-post images)
      tags:
        - images
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  imageUrl:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /tags:
    post:
      summary: Create a new tag
      description: Create a new tag
      tags:
        - tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "201":
          description: Tag created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tag:
                    $ref: "#/components/schemas/Tag"
    get:
      summary: Get all tags
      description: Get all tags
      tags:
        - tags
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tag"
  /tags/{id}:
    get:
      summary: Get a tag by ID
      description: Get a single tag by its ID
      tags:
        - tags
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Tag ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tag:
                    $ref: "#/components/schemas/Tag"
        "404":
          description: Not Found
    put:
      summary: Update a tag
      description: Update an existing tag
      tags:
        - tags
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Tag ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Tag updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tag:
                    $ref: "#/components/schemas/Tag"
        "404":
          description: Not Found
    delete:
      summary: Delete a tag
      description: Delete a tag by its ID
      tags:
        - tags
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Tag ID
      responses:
        "200":
          description: Tag deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /tags/posts/{postID}:
    post:
      summary: Add tags to a post
      description: Add tags to a specific post
      tags:
        - tags
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            type: integer
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_names:
                  type: array
                  items:
                    type: string
      responses:
        "204":
          description: Tags added successfully
    delete:
      summary: Remove tags from a post
      description: Remove tags from a specific post
      tags:
        - tags
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            type: integer
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_names:
                  type: array
                  items:
                    type: string
      responses:
        "204":
          description: Tags removed successfully
    get:
      summary: Get tags by post ID
      description: Get all tags associated with a specific post
      tags:
        - tags
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            type: integer
          description: Post ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tag"
  /communities:
    get:
      summary: Get all communities
      description: Retrieve a list of all chat communities.
      tags:
        - communities
      responses:
        "200":
          description: Successful response with a list of communities.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  communities:
                    type: array
                    items:
                      $ref: "#/components/schemas/Community"
    post:
      summary: Create a new community
      description: Create a new chat community.
      tags:
        - communities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommunityRequest"
      responses:
        "201":
          description: Community created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  community:
                    $ref: "#/components/schemas/Community"
        "400":
          description: Invalid input.
  /communities/search:
    get:
      summary: Search communities
      description: Search for communities by query
      tags:
        - communities
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Search query string for community name or description
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: perPage
          schema:
            type: integer
            default: 10
          description: Number of items per page for pagination
      responses:
        "200":
          description: Successful response with a list of communities
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  communities:
                    type: array
                    items:
                      $ref: "#/components/schemas/Community"
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  perPage:
                    type: integer
        "500":
          description: Internal server error
  /communities/{communityId}/messages:
    get:
      summary: Get messages for a community
      description: Retrieve historical chat messages for a specific community.
      tags:
        - communities
      parameters:
        - in: path
          name: communityId
          required: true
          schema:
            type: string
          description: The ID of the community.
      responses:
        "200":
          description: Successful response with a list of messages.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/Message"
        "404":
          description: Community not found.
components:
  schemas:
    Post:
      type: object
      required:
        - id
        - title
        - description
        - userId
        - tracks
        - Tags
      properties:
        id:
          type: integer
          format: uint
        title:
          type: string
        description:
          type: string
        userId:
          type: string
        headerImageUrl:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tracks:
          type: array
          items:
            $ref: "#/components/schemas/Track"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        likesCount:
          type: integer
          format: int32
        isLiked:
          type: boolean
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: uint
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Track:
      type: object
      properties:
        spotifyId:
          type: string
        name:
          type: string
        artistName:
          type: string
        albumImageUrl:
          type: string
    User:
      type: object
      required:
        - id
        - email
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        profileImageUrl:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password
    AuthResponse:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    Community:
      type: object
      required:
        - id
        - name
        - description
        - creatorId
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        creatorId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
    CreateCommunityRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    Message:
      type: object
      required:
        - id
        - communityId
        - senderId
        - content
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        communityId:
          type: string
          format: uuid
        senderId:
          type: string
          format: uuid
        content:
          type: string
        createdAt:
          type: string
          format: date-time
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: access_token
