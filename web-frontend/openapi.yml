openapi: 3.0.0
info:
  title: Muslog API
  version: 1.0.0
paths:
  /blogs:
    get:
      summary: Get all blogs
      description: Get all post posts
      tags:
        - blogs
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      description: Create a new post post
      tags:
        - blogs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                userId:
                  type: string
                tracks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Track'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: '#/components/schemas/Post'
  /blogs/{id}:
    get:
      summary: Get a post by ID
      description: Get a single post by its ID
      tags:
        - blogs
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Post ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: '#/components/schemas/Post'
        '404':
          description: Not Found
    put:
      summary: Update a post
      description: Update an existing post
      tags:
        - blogs
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: '#/components/schemas/Post'
        '404':
          description: Not Found
    delete:
      summary: Delete a post
      description: Delete a post by its ID
      tags:
        - blogs
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Post ID
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /blogs/page/{page}:
    get:
      summary: Get blogs by page
      description: Get posts paginated
      tags:
        - blogs
      parameters:
        - in: path
          name: page
          schema:
            type: integer
          required: true
          description: Page number
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  totalCount:
                    type: integer
  /spotify/search:
    get:
      summary: Search Spotify tracks
      description: Search for tracks on Spotify by a query string.
      tags:
        - spotify
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: The search query string for tracks.
      responses:
        '200':
          description: Successful response with a list of tracks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tracks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Track'
        '400':
          description: Bad request, missing search term.
        '500':
          description: Internal server error.
  /register:
    post:
      summary: User registration
      description: Register a new user.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
  /login:
    post:
      summary: User login
      description: Log in a user and return a JWT token.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /refresh:
    post:
      summary: Refresh JWT token
      description: Refresh the JWT access token using the refresh token.
      tags:
        - auth
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  accessToken:
                    type: string
        '401':
          description: Unauthorized
  /logout:
    post:
      summary: User logout
      description: Log out a user by clearing JWT cookies.
      tags:
        - auth
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /me:
    get:
      summary: Get current user
      description: Get the currently logged in user's information.
      tags:
        - auth
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /users:
    get:
      summary: Get all users
      description: Get all users
      tags:
        - users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get a user by ID
      description: Get a single user by their ID
      tags:
        - users
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: Not Found
  /users/{id}/posts:
    get:
      summary: Get user posts
      description: Get all posts by a user
      tags:
        - users
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: User ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          format: uint
        title:
          type: string
        description:
          type: string
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
    Track:
      type: object
      properties:
        spotifyId:
          type: string
        name:
          type: string
        artistName:
          type: string
        albumImageUrl:
          type: string
    User:
      type: object
      required:
        - id
        - email
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    UserRegister:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password
