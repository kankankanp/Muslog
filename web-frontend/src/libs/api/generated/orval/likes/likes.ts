/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Muslog API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  DeletePostsPostIDUnlike200,
  PostPostsPostIDLike200,
} from ".././model";

import { customInstance } from "../../../custom-instance";

/**
 * Like a post by its ID
 * @summary Like a post
 */
export const postPostsPostIDLike = (postID: number, signal?: AbortSignal) => {
  return customInstance<PostPostsPostIDLike200>({
    url: `/posts/${postID}/like`,
    method: "POST",
    signal,
  });
};

export const getPostPostsPostIDLikeMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPostsPostIDLike>>,
    TError,
    { postID: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPostsPostIDLike>>,
  TError,
  { postID: number },
  TContext
> => {
  const mutationKey = ["postPostsPostIDLike"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPostsPostIDLike>>,
    { postID: number }
  > = (props) => {
    const { postID } = props ?? {};

    return postPostsPostIDLike(postID);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPostsPostIDLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPostsPostIDLike>>
>;

export type PostPostsPostIDLikeMutationError = void;

/**
 * @summary Like a post
 */
export const usePostPostsPostIDLike = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postPostsPostIDLike>>,
      TError,
      { postID: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postPostsPostIDLike>>,
  TError,
  { postID: number },
  TContext
> => {
  const mutationOptions = getPostPostsPostIDLikeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Unlike a post by its ID
 * @summary Unlike a post
 */
export const deletePostsPostIDUnlike = (postID: number) => {
  return customInstance<DeletePostsPostIDUnlike200>({
    url: `/posts/${postID}/unlike`,
    method: "DELETE",
  });
};

export const getDeletePostsPostIDUnlikeMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
    TError,
    { postID: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
  TError,
  { postID: number },
  TContext
> => {
  const mutationKey = ["deletePostsPostIDUnlike"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
    { postID: number }
  > = (props) => {
    const { postID } = props ?? {};

    return deletePostsPostIDUnlike(postID);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePostsPostIDUnlikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePostsPostIDUnlike>>
>;

export type DeletePostsPostIDUnlikeMutationError = void;

/**
 * @summary Unlike a post
 */
export const useDeletePostsPostIDUnlike = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
      TError,
      { postID: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
  TError,
  { postID: number },
  TContext
> => {
  const mutationOptions = getDeletePostsPostIDUnlikeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
