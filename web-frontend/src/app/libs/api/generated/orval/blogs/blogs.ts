/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Muslog API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  DeleteBlogsId200,
  GetBlogs200,
  GetBlogsId200,
  GetBlogsPagePage200,
  PostBlogs201,
  PostBlogsBody,
  PutBlogsId200,
  PutBlogsIdBody,
} from ".././model";

import { customInstance } from "../../../custom-instance";

/**
 * Get all post posts
 * @summary Get all blogs
 */
export const getBlogs = (signal?: AbortSignal) => {
  return customInstance<GetBlogs200>({ url: `/blogs`, method: "GET", signal });
};

export const getGetBlogsQueryKey = () => {
  return [`/blogs`] as const;
};

export const getGetBlogsQueryOptions = <
  TData = Awaited<ReturnType<typeof getBlogs>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getBlogs>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBlogsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBlogs>>> = ({
    signal,
  }) => getBlogs(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getBlogs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBlogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBlogs>>
>;
export type GetBlogsQueryError = unknown;

export function useGetBlogs<
  TData = Awaited<ReturnType<typeof getBlogs>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBlogs>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlogs>>,
          TError,
          Awaited<ReturnType<typeof getBlogs>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBlogs<
  TData = Awaited<ReturnType<typeof getBlogs>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBlogs>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlogs>>,
          TError,
          Awaited<ReturnType<typeof getBlogs>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBlogs<
  TData = Awaited<ReturnType<typeof getBlogs>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBlogs>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all blogs
 */

export function useGetBlogs<
  TData = Awaited<ReturnType<typeof getBlogs>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBlogs>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetBlogsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new post post
 * @summary Create a new post
 */
export const postBlogs = (
  postBlogsBody: PostBlogsBody,
  signal?: AbortSignal,
) => {
  return customInstance<PostBlogs201>({
    url: `/blogs`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postBlogsBody,
    signal,
  });
};

export const getPostBlogsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postBlogs>>,
    TError,
    { data: PostBlogsBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postBlogs>>,
  TError,
  { data: PostBlogsBody },
  TContext
> => {
  const mutationKey = ["postBlogs"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postBlogs>>,
    { data: PostBlogsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postBlogs(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostBlogsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postBlogs>>
>;
export type PostBlogsMutationBody = PostBlogsBody;
export type PostBlogsMutationError = unknown;

/**
 * @summary Create a new post
 */
export const usePostBlogs = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postBlogs>>,
      TError,
      { data: PostBlogsBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postBlogs>>,
  TError,
  { data: PostBlogsBody },
  TContext
> => {
  const mutationOptions = getPostBlogsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get a single post by its ID
 * @summary Get a post by ID
 */
export const getBlogsId = (id: number, signal?: AbortSignal) => {
  return customInstance<GetBlogsId200>({
    url: `/blogs/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetBlogsIdQueryKey = (id: number) => {
  return [`/blogs/${id}`] as const;
};

export const getGetBlogsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getBlogsId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBlogsId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBlogsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBlogsId>>> = ({
    signal,
  }) => getBlogsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getBlogsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBlogsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBlogsId>>
>;
export type GetBlogsIdQueryError = void;

export function useGetBlogsId<
  TData = Awaited<ReturnType<typeof getBlogsId>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBlogsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlogsId>>,
          TError,
          Awaited<ReturnType<typeof getBlogsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBlogsId<
  TData = Awaited<ReturnType<typeof getBlogsId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBlogsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlogsId>>,
          TError,
          Awaited<ReturnType<typeof getBlogsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBlogsId<
  TData = Awaited<ReturnType<typeof getBlogsId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBlogsId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a post by ID
 */

export function useGetBlogsId<
  TData = Awaited<ReturnType<typeof getBlogsId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBlogsId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetBlogsIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing post
 * @summary Update a post
 */
export const putBlogsId = (id: number, putBlogsIdBody: PutBlogsIdBody) => {
  return customInstance<PutBlogsId200>({
    url: `/blogs/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: putBlogsIdBody,
  });
};

export const getPutBlogsIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putBlogsId>>,
    TError,
    { id: number; data: PutBlogsIdBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putBlogsId>>,
  TError,
  { id: number; data: PutBlogsIdBody },
  TContext
> => {
  const mutationKey = ["putBlogsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putBlogsId>>,
    { id: number; data: PutBlogsIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return putBlogsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutBlogsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putBlogsId>>
>;
export type PutBlogsIdMutationBody = PutBlogsIdBody;
export type PutBlogsIdMutationError = void;

/**
 * @summary Update a post
 */
export const usePutBlogsId = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putBlogsId>>,
      TError,
      { id: number; data: PutBlogsIdBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putBlogsId>>,
  TError,
  { id: number; data: PutBlogsIdBody },
  TContext
> => {
  const mutationOptions = getPutBlogsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a post by its ID
 * @summary Delete a post
 */
export const deleteBlogsId = (id: number) => {
  return customInstance<DeleteBlogsId200>({
    url: `/blogs/${id}`,
    method: "DELETE",
  });
};

export const getDeleteBlogsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteBlogsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteBlogsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deleteBlogsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteBlogsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteBlogsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteBlogsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteBlogsId>>
>;

export type DeleteBlogsIdMutationError = unknown;

/**
 * @summary Delete a post
 */
export const useDeleteBlogsId = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteBlogsId>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteBlogsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteBlogsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get posts paginated
 * @summary Get blogs by page
 */
export const getBlogsPagePage = (page: number, signal?: AbortSignal) => {
  return customInstance<GetBlogsPagePage200>({
    url: `/blogs/page/${page}`,
    method: "GET",
    signal,
  });
};

export const getGetBlogsPagePageQueryKey = (page: number) => {
  return [`/blogs/page/${page}`] as const;
};

export const getGetBlogsPagePageQueryOptions = <
  TData = Awaited<ReturnType<typeof getBlogsPagePage>>,
  TError = unknown,
>(
  page: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBlogsPagePage>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBlogsPagePageQueryKey(page);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getBlogsPagePage>>
  > = ({ signal }) => getBlogsPagePage(page, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!page,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getBlogsPagePage>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBlogsPagePageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBlogsPagePage>>
>;
export type GetBlogsPagePageQueryError = unknown;

export function useGetBlogsPagePage<
  TData = Awaited<ReturnType<typeof getBlogsPagePage>>,
  TError = unknown,
>(
  page: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBlogsPagePage>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlogsPagePage>>,
          TError,
          Awaited<ReturnType<typeof getBlogsPagePage>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBlogsPagePage<
  TData = Awaited<ReturnType<typeof getBlogsPagePage>>,
  TError = unknown,
>(
  page: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBlogsPagePage>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBlogsPagePage>>,
          TError,
          Awaited<ReturnType<typeof getBlogsPagePage>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBlogsPagePage<
  TData = Awaited<ReturnType<typeof getBlogsPagePage>>,
  TError = unknown,
>(
  page: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBlogsPagePage>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get blogs by page
 */

export function useGetBlogsPagePage<
  TData = Awaited<ReturnType<typeof getBlogsPagePage>>,
  TError = unknown,
>(
  page: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBlogsPagePage>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetBlogsPagePageQueryOptions(page, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
