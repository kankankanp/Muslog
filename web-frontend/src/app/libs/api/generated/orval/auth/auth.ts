/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Muslog API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  LoginRequest,
  PostAuthLogin200,
  PostLogout200,
  PostRefresh200,
  PostRegister201,
  RegisterRequest,
  User,
} from ".././model";

import { customInstance } from "../../../custom-instance";

/**
 * Register a new user.
 * @summary User registration
 */
export const postRegister = (
  registerRequest: RegisterRequest,
  signal?: AbortSignal,
) => {
  return customInstance<PostRegister201>({
    url: `/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerRequest,
    signal,
  });
};

export const getPostRegisterMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRegister>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationKey = ["postRegister"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRegister>>,
    { data: RegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRegister>>
>;
export type PostRegisterMutationBody = RegisterRequest;
export type PostRegisterMutationError = void;

/**
 * @summary User registration
 */
export const usePostRegister = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postRegister>>,
      TError,
      { data: RegisterRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getPostRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Log in a user and return a JWT token.
 * @summary User login
 */
export const postAuthLogin = (
  loginRequest: LoginRequest,
  signal?: AbortSignal,
) => {
  return customInstance<PostAuthLogin200>({
    url: `/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginRequest,
    signal,
  });
};

export const getPostAuthLoginMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ["postAuthLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogin>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationBody = LoginRequest;
export type PostAuthLoginMutationError = void;

/**
 * @summary User login
 */
export const usePostAuthLogin = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postAuthLogin>>,
      TError,
      { data: LoginRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getPostAuthLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Refresh the JWT access token using the refresh token.
 * @summary Refresh JWT token
 */
export const postRefresh = (signal?: AbortSignal) => {
  return customInstance<PostRefresh200>({
    url: `/refresh`,
    method: "POST",
    signal,
  });
};

export const getPostRefreshMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRefresh>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRefresh>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postRefresh"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRefresh>>,
    void
  > = () => {
    return postRefresh();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRefresh>>
>;

export type PostRefreshMutationError = void;

/**
 * @summary Refresh JWT token
 */
export const usePostRefresh = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postRefresh>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postRefresh>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostRefreshMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Log out a user by clearing JWT cookies.
 * @summary User logout
 */
export const postLogout = (signal?: AbortSignal) => {
  return customInstance<PostLogout200>({
    url: `/logout`,
    method: "POST",
    signal,
  });
};

export const getPostLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogout>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postLogout"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogout>>,
    void
  > = () => {
    return postLogout();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogout>>
>;

export type PostLogoutMutationError = unknown;

/**
 * @summary User logout
 */
export const usePostLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postLogout>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get the currently logged in user's information.
 * @summary Get current user
 */
export const getMe = (signal?: AbortSignal) => {
  return customInstance<User>({ url: `/me`, method: "GET", signal });
};

export const getGetMeQueryKey = () => {
  return [`/me`] as const;
};

export const getGetMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getMe>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMe>>> = ({
    signal,
  }) => getMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMe>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>;
export type GetMeQueryError = void;

export function useGetMe<
  TData = Awaited<ReturnType<typeof getMe>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          Awaited<ReturnType<typeof getMe>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMe<
  TData = Awaited<ReturnType<typeof getMe>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          Awaited<ReturnType<typeof getMe>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMe<
  TData = Awaited<ReturnType<typeof getMe>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get current user
 */

export function useGetMe<
  TData = Awaited<ReturnType<typeof getMe>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
