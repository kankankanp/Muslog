/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Muslog API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  DeletePostsPostIDUnlike200,
  GetPostsPostIDLiked200,
  PostPostsPostIDLike200,
} from ".././model";

import { customInstance } from "../../../custom-instance";

/**
 * Like a post by its ID
 * @summary Like a post
 */
export const postPostsPostIDLike = (postID: number, signal?: AbortSignal) => {
  return customInstance<PostPostsPostIDLike200>({
    url: `/posts/${postID}/like`,
    method: "POST",
    signal,
  });
};

export const getPostPostsPostIDLikeMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPostsPostIDLike>>,
    TError,
    { postID: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPostsPostIDLike>>,
  TError,
  { postID: number },
  TContext
> => {
  const mutationKey = ["postPostsPostIDLike"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPostsPostIDLike>>,
    { postID: number }
  > = (props) => {
    const { postID } = props ?? {};

    return postPostsPostIDLike(postID);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPostsPostIDLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPostsPostIDLike>>
>;

export type PostPostsPostIDLikeMutationError = void;

/**
 * @summary Like a post
 */
export const usePostPostsPostIDLike = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postPostsPostIDLike>>,
      TError,
      { postID: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postPostsPostIDLike>>,
  TError,
  { postID: number },
  TContext
> => {
  const mutationOptions = getPostPostsPostIDLikeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Unlike a post by its ID
 * @summary Unlike a post
 */
export const deletePostsPostIDUnlike = (postID: number) => {
  return customInstance<DeletePostsPostIDUnlike200>({
    url: `/posts/${postID}/unlike`,
    method: "DELETE",
  });
};

export const getDeletePostsPostIDUnlikeMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
    TError,
    { postID: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
  TError,
  { postID: number },
  TContext
> => {
  const mutationKey = ["deletePostsPostIDUnlike"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
    { postID: number }
  > = (props) => {
    const { postID } = props ?? {};

    return deletePostsPostIDUnlike(postID);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePostsPostIDUnlikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePostsPostIDUnlike>>
>;

export type DeletePostsPostIDUnlikeMutationError = void;

/**
 * @summary Unlike a post
 */
export const useDeletePostsPostIDUnlike = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
      TError,
      { postID: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePostsPostIDUnlike>>,
  TError,
  { postID: number },
  TContext
> => {
  const mutationOptions = getDeletePostsPostIDUnlikeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Check if the current user has liked a specific post
 * @summary Check if post is liked by user
 */
export const getPostsPostIDLiked = (postID: number, signal?: AbortSignal) => {
  return customInstance<GetPostsPostIDLiked200>({
    url: `/posts/${postID}/liked`,
    method: "GET",
    signal,
  });
};

export const getGetPostsPostIDLikedQueryKey = (postID: number) => {
  return [`/posts/${postID}/liked`] as const;
};

export const getGetPostsPostIDLikedQueryOptions = <
  TData = Awaited<ReturnType<typeof getPostsPostIDLiked>>,
  TError = void,
>(
  postID: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPostsPostIDLiked>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPostsPostIDLikedQueryKey(postID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPostsPostIDLiked>>
  > = ({ signal }) => getPostsPostIDLiked(postID, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!postID,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPostsPostIDLiked>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsPostIDLikedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPostsPostIDLiked>>
>;
export type GetPostsPostIDLikedQueryError = void;

export function useGetPostsPostIDLiked<
  TData = Awaited<ReturnType<typeof getPostsPostIDLiked>>,
  TError = void,
>(
  postID: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPostsPostIDLiked>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsPostIDLiked>>,
          TError,
          Awaited<ReturnType<typeof getPostsPostIDLiked>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsPostIDLiked<
  TData = Awaited<ReturnType<typeof getPostsPostIDLiked>>,
  TError = void,
>(
  postID: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPostsPostIDLiked>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsPostIDLiked>>,
          TError,
          Awaited<ReturnType<typeof getPostsPostIDLiked>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsPostIDLiked<
  TData = Awaited<ReturnType<typeof getPostsPostIDLiked>>,
  TError = void,
>(
  postID: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPostsPostIDLiked>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check if post is liked by user
 */

export function useGetPostsPostIDLiked<
  TData = Awaited<ReturnType<typeof getPostsPostIDLiked>>,
  TError = void,
>(
  postID: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPostsPostIDLiked>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsPostIDLikedQueryOptions(postID, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
